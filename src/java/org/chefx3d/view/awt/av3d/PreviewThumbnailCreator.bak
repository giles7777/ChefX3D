/*****************************************************************************
 *                        Copyright Yumetech, Inc (c) 2010
 *                               Java Source
 *
 * This source is licensed under the GNU LGPL v2.1
 * Please read http://www.gnu.org/copyleft/lgpl.html for more information
 *
 * This software comes with the standard NO WARRANTY disclaimer for any
 * purpose. Use it at your own risk. If there's a problem you get to fix it.
 *
 ****************************************************************************/

package org.chefx3d.view.awt.av3d;

// External Imports
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Point;
import java.awt.Robot;
import java.awt.Rectangle;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.image.BufferedImage;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JProgressBar;

import javax.vecmath.Matrix4f;

import org.chefx3d.model.*;

import org.chefx3d.util.ApplicationParams;

import org.chefx3d.view.awt.SceneEffectsListener;
import org.chefx3d.view.awt.SceneEffectsRequest;

import org.chefx3d.view.awt.scenemanager.PerFrameObserver;
import org.chefx3d.view.awt.scenemanager.SceneManagerObserver;

import org.j3d.aviatrix3d.Scene;
import org.j3d.aviatrix3d.ViewEnvironment;

/**
 * A blocking dialog that accepts a SceneManagerObserver, a list of EntityIDs,
 * and a CommandController in order to execute the following sequence of steps:
 *
 * First:  A ThumbnailProcessor is created, and added to the scene, via the
 *         SceneManagerObserver
 *
 * Second: This class will iterate through the EntityIDs, and select them one at
 *         a time, and take a thumbnail while each is selected.
 *
 * Third:  The captured thumbnails are returned.
 *
 * @author christopher
 * @version $Revision: 1.12 $
 */
public class PreviewThumbnailCreator extends JDialog implements
    PerFrameObserver,
    ActionListener,
    EntitySelectionListener {

    /**
     * Text for the capturing button.
     * TODO:  Internationalise
     */
    private static final String BUTTON_TEXT = "Capture thumbnail index: ";

    /** Number of frames to wait before issuing capture call */
    private static final int CAPTURE_FRAME_DELAY = 20;

    /** Singleton panel to do all the work. */
    private static PreviewThumbnailCreator creator;

    /** The list of thumbnails generated */
    private static ArrayList<BufferedImage> thumbnails;

    /** The Preview instance */
    private Preview preview;

    /** The PreviewLayerManager instance */
    private PreviewLayerManager plm;

    /** The PreviewLegendLayerManager instance */
    private PreviewLegendLayerManager legend;

    /** Visibility handler, for imaging zones */
    private LocationVisibilityHandler vis_orthographic;

    /** Visibility handler, for imaging perspective views */
    private PreviewVisibilityHandler vis_perspective;

    /** Zone viewpoint calculator */
    private ZoneView zoneView;

    /** The scene manager Observer*/
    private SceneManagerObserver mgmtObserver;

    /** The location that is being imaged */
    private LocationEntity location;

    /** An orthographic viewpoint entity for zone imaging */
    private ViewpointEntity ortho;

    /** List of entities that need to be selected before imaging */
    private Entity[] entities;

    /** CommandController to do the selecting */
    private CommandController controller;

    /** The world model, to look up entities */
    private WorldModel model;

    /** Index into the entities array, to know which one to select
     *  and then thumbnail next. */
    private int index;

    /** The button that allows for UI driven capturing, to provide a real
     *  awesome interactive look into the thumbnail capturing. */
    private JButton captureButton;

    /** Progress bar to indicate how much more work is to be done */
    private JProgressBar captureProgress;

    /** Determine which mode we're in, because the UI elements are different */
    private boolean debugMode = false;

    /** Sidepocketed ground normal for the location */
    private float[] groundNormal;

	/** Frame count from selection event to screen capture */
    private int frame_delay;

    /**
     * Constructor, private because a return value is needed as a result of displaying this
     * dialog.  Invoking this constructor doesn't do anything but initialize variables, and
     * register as a PerFrameObserver.
     *
     * @param owner The parent frame
     * @param previewParam The Preview UI component
     * @param scene The Scene being displayed
     * @param sceneMgmtObserver The SceneManagerObserver in charge of the Scene
     * @param commandController The CommandController for selection commands
     * @param worldModel
     * @param locationEntity The LocationEntity ancestor of the entities to be imaged
     * @param entityArray The entities to image, either ViewpointEntity(s) or
     * ZoneEntity(s).

     */
    private PreviewThumbnailCreator(
        Frame owner,
        Preview previewParam,
        Scene scene,
        SceneManagerObserver sceneMgmtObserver,
        CommandController commandController,
        WorldModel worldModel,
        LocationEntity locationEntity,
        Entity[] entityArray) {

        // Modal.
        super(owner, true);

        preview = previewParam;
        mgmtObserver = sceneMgmtObserver;
        controller = commandController;
        model = worldModel;
        location = locationEntity;
        entities = entityArray;

        preview.enablePerformanceMonitor(false);

        // ensure that the location is active
        location.addEntitySelectionListener(this);
        ArrayList<Command> cmdList = new ArrayList();
        Command cmd = null;
		if (location.isSelected()) {
			cmd = new SelectEntityCommand(model, location, false);
			cmdList.add(cmd);
			controller.execute(cmd);
		}
        cmd = new SelectEntityCommand(model, location, true);
        cmdList.add(cmd);

        MultiCommand multiCommand = new MultiCommand(
			cmdList,
			"Selection Occured",
			false);
        controller.execute(multiCommand);

        thumbnails = new ArrayList<BufferedImage>();

        groundNormal = location.getGroundNormal();

        plm = (PreviewLayerManager)preview.getLayerManager();
        AV3DEntityManager mngr = plm.getAV3DEntityManager(location);

		legend = (PreviewLegendLayerManager)preview.getLegendLayerManager();
		legend.setEntityManager(mngr);
		
        vis_orthographic = new LocationVisibilityHandler(mgmtObserver);
        vis_orthographic.setEntityManager(mngr);

        vis_perspective = plm.getVisibilityHandler();

        zoneView = new ZoneView(
            plm.getViewEnvironment(),
            model,
            controller,
            null);
        zoneView.setLocationEntity(location);
        zoneView.setEntityManager(mngr);

        Dimension thumbnailSize = new Dimension(
            AV3DConstants.THUMBNAIL_WIDTH,
            AV3DConstants.THUMBNAIL_HEIGHT);
        preview.setPreferredSize(thumbnailSize);

        //
        // layout the components and set to visible
        //
        add(preview, BorderLayout.CENTER);

        debugMode = (Boolean)ApplicationParams.get(ApplicationParams.DEBUG_MODE);
        if (debugMode) {
			captureButton = new JButton(BUTTON_TEXT + "0");
            captureButton.addActionListener(this);
            add(captureButton, BorderLayout.SOUTH);
        } else {
			captureProgress = new JProgressBar(JProgressBar.HORIZONTAL, 0, entities.length);
            add(captureProgress, BorderLayout.SOUTH);
        }

        index = 0;
        frame_delay = -1;

        this.pack();

        // just for giggles, center the dialog on the screen
        Dimension screenSize = getToolkit().getScreenSize();
        Dimension dialogSize = getSize();
        setLocation(
            ((screenSize.width - dialogSize.width)/2),
            ((screenSize.height - dialogSize.height)/2));

        this.setVisible(true);
    }

    /**
     * Constructor
     *
     * @param data
     * @param location The LocationEntity ancestor of the entities to be imaged
     * @param entities The entities to image, either ViwepointEntity(s) or
     * ZoneEntity(s).
     */
    private PreviewThumbnailCreator(
        ThumbnailData data,
        LocationEntity location,
        Entity[] entities) {

        this(
            data.getOwner(),
            (Preview)data.getComp(),
            data.getScene(),
            data.getSceneManagerObserver(),
            data.getController(),
            data.getModel(),
            location,
            entities);
    }

    //---------------------------------------------------------------
    // Methods defined by PerFrameObserver
    //---------------------------------------------------------------

    /**
     * A new frame tick is observed, so do some processing now.
     */
    public void processNextFrame() {

        if (frame_delay > 0) {
			
            frame_delay--;
			
        } else if (frame_delay == 0) {
			
			processCapture();
            frame_delay = -1;
        }
    }

    //-------------------------------------------------------------------------
    // Methods defined by ActionListener
    //-------------------------------------------------------------------------

    /**
     * An action event has been dispatched
     */
    public void actionPerformed(ActionEvent e) {
		
        Object src = e.getSource();
        if (src == captureButton) {
			// process the capture of the selected entity
            captureButton.setEnabled(false);
			processCapture();
        }
    }

    //-------------------------------------------------------------------------
    // Methods defined by EntitySelectionListener
    //-------------------------------------------------------------------------

    /**
     * A selection event has occured
     */
    public void selectionChanged(int entityID, boolean selection) {
		
        Entity entity = model.getEntity(entityID);
        if (selection) {
            if (entity instanceof LocationEntity) {
				
                location.removeEntitySelectionListener(this);
				
				if (!debugMode) {
					mgmtObserver.addObserver(this);
				}
				// with the location loaded, queue up the entities
				// to capture
				queueCapture(index);
				
            } else if ((entity instanceof ViewpointEntity) ||
                (entity instanceof ZoneEntity)) {

				// the entity to capture has been selected
                if (!debugMode) {
					// the capture will be processed automagically,
					// after the required frame delay
                    frame_delay = CAPTURE_FRAME_DELAY;
                }
                if (!(entity == ortho)) {
                    entity.removeEntitySelectionListener(this);
                }
            }
        }
    }

    /**
     * A highlighted event has occured
     */
    public void highlightChanged(int entityID, boolean selection) {
        // Ignored
    }

    //-------------------------------------------------------------------------
    // Local Methods - public
    //-------------------------------------------------------------------------

    /**
     * Alternate entry point using the complex data structure
     * that encapsulates all the information
     * needed to create thumbnails.
     *
     * @param request
     * @param location The LocationEntity ancestor of the entities to be imaged
     * @param entities The entities to image, either ViewpointEntity(s) or
     * ZoneEntity(s).
     */
    public static BufferedImage[] getThumbnails(
        Thumbnailable request,
        LocationEntity location,
        Entity[] entities) {

        if ((entities != null) && (entities.length > 0)) {
            ThumbnailData data = request.getThumbnailData();
            creator = new PreviewThumbnailCreator(data, location, entities);
            return thumbnails.toArray(new BufferedImage[0]);
        } else {
            return new BufferedImage[0];
        }
    }

    //-------------------------------------------------------------------------
    // Local Methods - private
    //-------------------------------------------------------------------------

    /**
     * Generate the commands that will select the entities that 
	 * require snapshots.
	 *
     * @param index An index into the entities array
     */
	private void queueCapture(int index) {
		
        // Make sure it's a valid request, otherwise, exit
        if ((index >= 0) && (index < entities.length)) {

            Entity entity = entities[index];
            Command cmd = null;
            MultiCommand multiCmd = null;

            ArrayList<Command> cmdList = new ArrayList<Command>();
			
            // Different commands for entity types
            switch (entity.getType()) {
            case Entity.TYPE_VIEWPOINT:

                vis_perspective.setEnabled(true);

                entity.addEntitySelectionListener(this);

                location.setGroundNormal(groundNormal);

                if (entity.isSelected()) {
                    cmd = new SelectEntityCommand(model, entity, false);
                    cmdList.add(cmd);
                }
                cmd = new SelectEntityCommand(model, entity, true);
                cmdList.add(cmd);

                multiCmd = new MultiCommand(cmdList, "Selection Occured", false) ;
                controller.execute(multiCmd);

                break;

            case Entity.TYPE_GROUNDPLANE_ZONE:
				legend.setActiveZoneEntity((ZoneEntity)entity);
                legend.enableFloorLegend(true);
 				break;
					
            case Entity.TYPE_SEGMENT:
				legend.setActiveZoneEntity((ZoneEntity)entity);
				legend.enableSegmentLegend(true);
				if (preview.getRenderingMode() == Preview.RENDER_LINE_ART) {
					legend.enableProductLegend(true);
				}
				break;
				
			case Entity.TYPE_MODEL_ZONE:
				legend.setActiveZoneEntity((ZoneEntity)entity);
				break;
            }
			if (entity.isZone()) {
				
                ZoneEntity ze = (ZoneEntity)entity;
                if (ortho == null) {
                    // create a temporary viewpoint for zone imaging
                    ortho = createOrthographicViewpoint();
                    ViewpointContainerEntity vce =
                        location.getViewpointContainerEntity();
                    cmd = new AddEntityChildCommand(
                            model,
                            model.issueTransactionID(),
                            vce,
                            ortho,
                            true);
                    cmdList.add(cmd);

                    ortho.addEntitySelectionListener(this);
                }

                vis_perspective.setEnabled(false);

                location.setGroundNormal(new float[]{0, 1, 0});

                // set the visibility of products by zone
                vis_orthographic.setActiveZoneEntity(ze);

                // note: always select the viewpoint before configuring
                // it's parameters
                if (ortho.isSelected()) {
                    cmd = new SelectEntityCommand(model, ortho, false);
                    cmdList.add(cmd);
                }
                cmd = new SelectEntityCommand(model, ortho, true);
                cmdList.add(cmd);

                multiCmd = new MultiCommand(cmdList, "Selection Occured", false) ;
                controller.execute(multiCmd);

                // configure the viewpoint parameters
                zoneView.configView(ze, ortho);
			}
        }
    }

    /**
     * Request to perform the screen capture
     */
	private void processCapture() {

		//////////////////////////////////////////////
		try {
			Point p = preview.getLocationOnScreen();
			BufferedImage imgx = new Robot().createScreenCapture(
				new Rectangle(
					p.x, 
					p.y, 
					preview.getWidth(), 
					preview.getHeight()));
	        thumbnails.add(imgx);
		} catch (Exception e) {
			System.out.println("Exception during screen capture: "+ e.getMessage());
		}
		//////////////////////////////////////////////
		
		Entity entity = entities[index];
		switch (entity.getType()) {
		case Entity.TYPE_GROUNDPLANE_ZONE:
			legend.enableFloorLegend(false);
			break;
		case Entity.TYPE_SEGMENT:
			legend.enableSegmentLegend(false);
			legend.enableProductLegend(false);
			break;
		}
		
        index++;
		
        // Make sure there is more to do
        if (index >= entities.length) {

			if (!debugMode) {
            	mgmtObserver.removeObserver(this);
			}

            removeAll();
            setVisible(false);
            dispose();

            // remove the temporary ortho viewpoint
            if (ortho != null) {
                ortho.removeEntitySelectionListener(this);

                ViewpointContainerEntity vce =
                    location.getViewpointContainerEntity();
                Command cmd = new RemoveEntityChildCommand(model, vce, ortho, false);
                controller.execute(cmd);
            }

            // restore viewpoint and navigation
            location.setGroundNormal(groundNormal);

            ViewpointContainerEntity vce = location.getViewpointContainerEntity();
            List<ViewpointEntity> viewpoint_list = vce.getViewpoints();

            String view_id = preview.getIdentifier();
            for (ViewpointEntity vp : viewpoint_list) {
                String id = (String)vp.getProperty(
                    Entity.DEFAULT_ENTITY_PROPERTIES,
                    ViewpointEntity.VIEW_IDENTIFIER_PROP);

                String name = (String) vp.getProperty(
                    Entity.DEFAULT_ENTITY_PROPERTIES,
                    ViewpointEntity.NAME_PROP);

                if (AV3DConstants.DEFAULT_VIEWPOINT_NAME.equals(name) &&
                    view_id.equals(id)) {
                    ArrayList<Command> cmdList = new ArrayList<Command>();
                    if (vp.isSelected()) {
                        Command cmd = new SelectEntityCommand(model, vp, false);
                        cmdList.add(cmd);
                    }
                    Command cmd = new SelectEntityCommand(model, vp, true);
                    cmdList.add(cmd);

                    MultiCommand multiCommand = new MultiCommand(
                        cmdList,
                        "Selection Occured",
                        false);
                    controller.execute(multiCommand);
                    break;
                }
            }
            vis_perspective.setEnabled(true);
            preview.enablePerformanceMonitor(true);

        } else {
            if (debugMode) {
                // Re-enable the capture button and update it's text
                captureButton.setEnabled(true);
                captureButton.setText(BUTTON_TEXT + index);
            } else {
                captureProgress.setValue(index);
            }
			queueCapture(index);
        }
    }

    /**
     * Create and return a viewpoint entity for zone imaging
     *
     * @return A ViewpointEntity
     */
    private ViewpointEntity createOrthographicViewpoint() {

        HashMap<String, Map<String, Object>> vpProps =
            new HashMap<String, Map<String, Object>>();
        HashMap<String, Object> vpParams = new HashMap<String, Object>();
        HashMap<String, Object> vpPropSheet = new HashMap<String, Object>();

        vpPropSheet.put(
            Entity.NAME_PROP,
            this.getClass().getName());

        vpPropSheet.put(
            ViewpointEntity.START_VIEW_MATRIX_PROP,
            new float[16]);

        vpPropSheet.put(
            ViewpointEntity.PROJECTION_TYPE_PROP,
            AV3DConstants.ORTHOGRAPHIC);

        vpPropSheet.put(
            ViewpointEntity.VIEW_IDENTIFIER_PROP,
            preview.getIdentifier());

        vpProps.put(Entity.ENTITY_PARAMS, vpParams);
        vpProps.put(Entity.DEFAULT_ENTITY_PROPERTIES, vpPropSheet);

        ViewpointEntity ve = new ViewpointEntity(
            model.issueEntityID(),
            vpProps);

        return(ve);
    }
}
