/*****************************************************************************
 *                        Copyright Yumetech, Inc (c) 2006 - 2009
 *                               Java Source
 *
 * This source is licensed under the GNU LGPL v2.1
 * Please read http://www.gnu.org/copyleft/lgpl.html for more information
 *
 * This software comes with the standard NO WARRANTY disclaimer for any
 * purpose. Use it at your own risk. If there's a problem you get to fix it.
 *
 ****************************************************************************/

package org.chefx3d.rules.definitions;

//External Imports

//Internal Imports
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

import org.chefx3d.model.Command;
import org.chefx3d.model.Entity;
import org.chefx3d.model.MoveEntityCommand;
import org.chefx3d.model.TransitionEntityChildCommand;
import org.chefx3d.model.WorldModel;
import org.chefx3d.model.PositionableEntity;
import org.chefx3d.rules.properties.ChefX3DRuleProperties;

/**
* Determines if Entity is colliding with other objects and responds
* with correction if required. Also performs selection highlighting for transient
* commands that are causing a collection.
*
* @author Ben Yarger
* @version $Revision: 1.40 $
*/
public class MovementHasObjectCollisionsRule extends Rule{

    /** Status message when mouse button released and collisions exist */
    private static final String MV_PLACE_COL_PROP =
        "org.chefx3d.rules.definitions.MovementHasObjectCollisionsRule.cannotMove";

    /** Status message when illegal collisions exist for transient commands */
    private static final String MV_TRANS_COL_PROP =
        "org.chefx3d.rules.definitions.MovementHasObjectCollisionsRule.collisionsExist";

    /** Static class instance */
    private static MovementHasObjectCollisionsRule rule =
        new MovementHasObjectCollisionsRule();

    /** Private constructor. All Rule classes should be implemented this way. */
    private MovementHasObjectCollisionsRule(){

        ruleType = RULE_TYPE.INVIOLABLE;
    }

    /**
     * Return class instance
     * @return SnapToRotationValueRule
     */
    public static MovementHasObjectCollisionsRule getInstance(){
        return rule;
    }

    /**
     * Check if the Entity collides with objects.
     *
     * @param entity Entity object
     * @param model WorldModel object
     * @param command Command object
     * @return boolean True if collisions exist, false otherwise
     */
    @Override
    protected boolean performCheck(
            Entity entity,
            WorldModel model,
            Command command){

//System.out.println("Performing MovementColl Rule");
        if(entity.getType() == Entity.TYPE_VERTEX) {
            return false;
        }


        performExtendedCollisionCheck(command);

//System.out.println("   Collisions: " + collisionEntitiesMap);
        // If collisionEntities is null (no collisions occurred) then return false
        if (collisionEntitiesMap == null) {

            return false;
        }

        // get the list of connected auto-spans to ignore
        ArrayList<Entity> autoSpanEntities = new ArrayList<Entity>();

        Iterator<Map.Entry<Entity, ArrayList<Entity>>> itr =
            collisionEntitiesMap.entrySet().iterator();
        while (itr.hasNext()) {
            Map.Entry<Entity, ArrayList<Entity>> next = itr.next();

            ArrayList<Entity> check = next.getValue();
            for(int i = 0; i < check.size(); i++){

                Entity tmpEntity = check.get(i);

                Boolean autoSpan = (Boolean) tmpEntity.getProperty(
                        Entity.DEFAULT_ENTITY_PROPERTIES,
                        ChefX3DRuleProperties.SPAN_OBJECT_PROP);

                if(autoSpan != null && autoSpan == true){
                    autoSpanEntities.add(tmpEntity);
                }
            }
        }

        int[] ignoreEntities = null;
        if (autoSpanEntities.size() > 0) {
            ignoreEntities = new int[autoSpanEntities.size()];
            for(int i = 0; i < autoSpanEntities.size(); i++) {
                ignoreEntities[i] = autoSpanEntities.get(i).getEntityID();
            }
        }

        // Perform collision analysis
        performExtendedCollisionAnalysisHelper(null, false, ignoreEntities);

        // If there are no collisionEntities, see if the reserved None
        // relationship classification exists. If so, then we are cool,
        // return false, no illegal collisions.

        if (!legalZeroCollisionExtendedCheck()) {
            return false;
        }

        // Make sure collisions are legal - return false if collisions are
        // legal.
        if (!hasIllegalCollisionExtendedHelper()) {
//System.out.println("   NoIllegalCollisions");
            return false;
        }

        // No legal cases were found, return true - illegal collisions exist.
        // Reset values to put entity back at starting position.
        if(command instanceof MoveEntityCommand){
            resetToOriginalPosition(
                    (MoveEntityCommand) command,
                    (PositionableEntity)entity);

            String msg = intl_mgr.getString(MV_PLACE_COL_PROP);
            popUpMessage.showMessage(msg);

            return false;

        } else if (command instanceof TransitionEntityChildCommand &&
                command.isTransient() == false){

            resetToOriginalPosition((TransitionEntityChildCommand)command);

            String msg = intl_mgr.getString(MV_PLACE_COL_PROP);
            popUpMessage.showMessage(msg);

            return false;

        } else {
//System.out.println("Unhandled Command: " + command);
            String msg = intl_mgr.getString(MV_TRANS_COL_PROP);
            statusBar.setMessage(msg);
            return true;
        }
    }

    //---------------------------------------------------------------
    // Local methods
    //---------------------------------------------------------------

    /**
     * Resets the entity back to the last known good position.
     *
     * @param mvCommand MoveEntityCommand causing the entity to move
     * @param posEntity PositionableEntity being moved by MoveEntityCommand
     */
    private void resetToOriginalPosition(
            MoveEntityCommand mvCommand,
            PositionableEntity posEntity){

        double[] startingPosition = new double[3];
        posEntity.getStartingPosition(startingPosition);

        mvCommand.setEndPosition(startingPosition);
//      mvCommand.setPosition(startingPosition);
    }

    /**
     * Reset the entity back to the last known good position.
     *
     * @param tranCmd
     */
    private void resetToOriginalPosition(
            TransitionEntityChildCommand tranCmd){

        tranCmd.resetToStart();
    }
}
