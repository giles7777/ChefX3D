/*****************************************************************************
 *                        Copyright Yumetech, Inc (c) 2006 - 2010
 *                               Java Source
 *
 * This source is licensed under the GNU LGPL v2.1
 * Please read http://www.gnu.org/copyleft/lgpl.html for more information
 *
 * This software comes with the standard NO WARRANTY disclaimer for any
 * purpose. Use it at your own risk. If there's a problem you get to fix it.
 *
 ****************************************************************************/

package org.chefx3d.rules.engines;

// External imports
import java.util.*;

import org.chefx3d.model.Command;
import org.chefx3d.model.Entity;
import org.chefx3d.model.PositionableEntity;
import org.chefx3d.model.RuleDataAccessor;

// Internal imports
import org.chefx3d.rules.rule.Rule;
import org.chefx3d.rules.rule.RuleEvaluationResult;

import org.chefx3d.util.CheckStatusReportElevation;
import org.chefx3d.util.ErrorReporter;

import org.chefx3d.view.common.EditorView;

/**
 * Rule engine for handling sets of rules.  A list of rules to process will be
 * provided to this class.  The class will then process the list of rules in 
 * order until it is complete.  As each rule is processed it will return two 
 * values of interest: should we continue processing rules and a jump to a rule.
 * 
 * If at any time the continue processing is false the engine will halt 
 * processing.  If a jump to rule is set then that rule is placed next in the 
 * list and processing will continue normally from that new rule.
 *
 * @author Russell Dodds
 * @version $Revision: 1.14 $
 */
public class DefaultRuleEngine extends BaseRuleEngine {

    /** Use this flag to display the position of a product after each run evaluation */
    private boolean showPositionChange;
    
    /**
     * The default constructor
     * 
     * @param errorReporter The error reporter
     * @param collisionChecker The collision checker used to determine collisions
     * @param view The scene graph
	 * @param statusManager The status manager
     * @param ruleList The lost of rules to process
     */
	public DefaultRuleEngine(
			ErrorReporter errorReporter,
			EditorView view, 
			CheckStatusReportElevation statusManager, 
			LinkedHashMap<String, Rule> ruleList){

		super(errorReporter, view, statusManager, ruleList);
		
		showPositionChange = false;
	}

    //---------------------------------------------------------------
    // Methods defined by BaseRuleEngine
    //---------------------------------------------------------------
    
	/**
	 * Takes the command and runs it through all of the rules specified in the 
	 * rules list provided.
	 *
	 * @param command The Command to process
	 * @param result The object to initialize with the evaluation result
	 * @return The result object
	 */
	protected RuleEvaluationResult executeRuleLogic(
	        Command command,
	        RuleEvaluationResult result) {
	    	    	    
	    // get the list of names to process
	    String[] names = new String[ruleList.size()];
	    ruleList.keySet().toArray(names);
	    
	    int len = names.length;
	    for (int i = 0; i < len; i++) {
	        
	        String ruleName = names[i];
	        Rule rule = ruleList.get(ruleName);
	        
	        errorReporter.messageReport("Processing rule " + ruleName);
	        	        
	        result = rule.processRule(command, result);
	        
	        if (!result.getResult()) {
	            result.addFailedRule(rule);
	        }
	        
	        if (showPositionChange && command instanceof RuleDataAccessor) {
	            Entity ent = 
	                ((RuleDataAccessor)command).getEntity();
	            
	            if (ent instanceof PositionableEntity) {
	                
	                double[] pos = new double[3];
	                ((PositionableEntity)ent).getPosition(pos);
	                
	                System.out.println("rule: " + ruleName);
	                System.out.println("position: " + java.util.Arrays.toString(pos));

	            }
	            
	        }
	        
            // elevate the status to the max level generated by the latest rule 
            statusManager.setElevationLevel(result.getStatusValue());
	        
	        // if the isApproved is false then stop processing 
	        // the list since we have reached an invalid state
	        if (!result.isApproved())
	            break;

	    }
	    
	    // we are done, return the current state
		return result;
	}
}
