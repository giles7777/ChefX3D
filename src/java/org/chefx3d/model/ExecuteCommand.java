/*****************************************************************************
 *                        Copyright Yumetech, Inc (c) 2006
 *                               Java Source
 *
 * This source is licensed under the GNU LGPL v2.1
 * Please read http://www.gnu.org/copyleft/lgpl.html for more information
 *
 * This software comes with the standard NO WARRANTY disclaimer for any
 * purpose. Use it at your own risk. If there's a problem you get to fix it.
 *
 ****************************************************************************/

package org.chefx3d.model;

//External Imports
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Stack;

import org.chefx3d.util.ErrorReporter;

/**
 * Executes the execute method of the command
 *
 * @author Russell Dodds
 * @version $Revision: 1.7 $
 */
public class ExecuteCommand
    implements CommandWrapper {

    /** The command to call */
    protected Command command;

    /** The original command being call */
    protected Command origCommand;

    /** The size of the stack of <code>Command</code>s. */
    private int maxSize;

    /** The list of commands to undo */
    private Stack<Command> undoCommands;

    /** The list of commands to redo */
    private Stack<Command> redoCommands;

    /** The list of listeners to notify */
    private ArrayList<CommandListener> commandListeners;

    /** The ErrorReporter for messages */
    private ErrorReporter errorReporter;

    /**
     * Constructor
     *
     * @param command
     * @param maxSize
     * @param undoCommands
     * @param redoCommands
     * @param commandListeners
     * @param errorReporter
     */
    public ExecuteCommand(
            Command command,
            int maxSize,
            Stack<Command> undoCommands,
            Stack<Command> redoCommands,
            ArrayList<CommandListener> commandListeners,
            ErrorReporter errorReporter) {

        this.command = command;
        this.maxSize = maxSize;
        this.undoCommands = undoCommands;
        this.redoCommands = redoCommands;
        this.commandListeners = commandListeners;
        this.errorReporter = errorReporter;
        
        origCommand = command;

    }

    /**
     * Perform the command method
     */
    public void process() {


        try {

            // execute the command
            command.execute();
          
            if (!command.isTransient() && command.isUndoable()) {
                
                // add the element to the stack
                undoCommands.push(command);
                
            } else if (!command.isTransient() && !command.isUndoable()) {
                
                // clear the undo stack in this case
                undoCommands.clear();
                
            }

            // resize to the maxSize, this will trim the oldest items
            if (undoCommands.size() > maxSize) {
                undoCommands.setSize(maxSize);
            }

            // flush the redo stack, we never want to redo after a
            // new command has been added
            redoCommands.clear();

            // finally, notify listeners of the change.  make sure to use the
            // original command otherwise it cannot be matched
            for (int i = 0; i < commandListeners.size(); i++) {
                CommandListener l = commandListeners.get(i);
                l.commandExecuted(origCommand);
            }

        } catch (Exception e) {
            errorReporter.errorReport("Execution of " + command.getDescription() + " command failed.", e);
        }

    }
    
    /**
     * Reject the command
     */
    public void reject() {
      
        // execute the command, this should be the reset to start version 
        // of the command that was generated by the validator
        command.execute();

        // finally, notify listeners of the change
        for (int i = 0; i < commandListeners.size(); i++) {
            CommandListener l = commandListeners.get(i);
            l.commandFailed(origCommand);
        }

    }
    
    //---------------------------------------------------------------
    // Local Methods
    //---------------------------------------------------------------
    
    /**
     * Update the command that is wrapped by this
     * 
     * @param update
     */
    public void setValidatedCommand(Command command) {
        this.command = command;
    }
     
}